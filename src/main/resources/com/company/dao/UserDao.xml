<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.company.dao.UserDao">
<sql id="Base_Column_List">
	id,
	username,
	address,
	sex,
	birthday
</sql>
<!--配置SQL语句-->
<sql id="defaultSql">
select * from user
</sql>
<!--配置 查询结果的列名和实体类的属性名的对应关系-->
<resultMap id="userMap" type="User">
<id property="id" column="id" />
<result property="username" column="username" />
<result property="address" column="address"/>
<result property="sex" column="sex"/>
<result column="birthday" property="birthday"/>
<collection property="accountList" ofType="com.company.domain.Account">
<id column="aid" property="id"/>
<result column="UID" property="uid"/>
<result column="MONEY" property="money"/>
</collection>
</resultMap>


<resultMap type="com.company.entity.User" id="userMap1">
<id column="id" property="id"/>
<result column="username" property="username"/>
<result column="address" property="address"/>
<result column="sex" property="sex"/>
<result column="birthday" property="birthday"/>
<!-- collection 是用于建立一对多中集合属性的对应关系
ofType 用于指定集合元素的数据类型
select 是用于指定查询账户的唯一标识（账户的 dao 全限定类名加上方法名称）
column 是用于指定使用哪个字段的值作为条件查询
-->
<collection property="accounts" ofType="account"
select="com.company.dao.UserDao.findUserById"
column="id">
</collection>
</resultMap>


<!--<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>-->
<cache/>

    <insert id="insertUser" parameterType="com.company.domain.User">
<!--    添加用户-->
    insert into user(username,address,sex,birthday)values (#{username},#{address},#{sex},#{birthday});
<!--    配置添加用户后，获取用户id-->
<selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
select last_insert_id()
</selectKey>
</insert>
<update id="updateUser" parameterType="com.company.domain.User">
<!--更新用户-->
update user set username=#{username},address=#{address},sex=#{sex} where id=#{id}
</update>
<delete id="deleteUser" parameterType="integer">
<!--int和Integer没啥区别，idea或者mybatis就算你参数是int，之后 parametType写成_int,它也当做integer处理
应该是自动装箱和解箱的处理-->
delete from user where id = #{userId}
</delete>
<select id="findUserById" resultType="com.company.domain.User" parameterType="integer">
<!--根据用户id来查询用户-->
select *from user where id =#{userId}

</select>
<select id="findByUserName" resultType="com.company.domain.User" parameterType="string">
<bind name="myname" value="'%' + _parameter+ '%'"/>
<!--模糊查询-->
select *from user where username like #{myname,jdbcType=VARCHAR}
<!--select *from user where username like '%${value}%'-->
</select>
<select id="findTotal" resultType="int">
<!--查询总记录数-->
select count(id) from user
</select>
<select id="findUserByVo" resultType="com.company.domain.User" parameterType="com.company.domain.QueryVo">
<!--根据queryvo的条件来查询用户-->
select *from user where username like #{user.username,jdbcType=VARCHAR}
</select>
<select id="findByUser" resultType="com.company.domain.User" parameterType="User" >
<!--这里where 1=1的作用就是当后面都加入的时候，让它总是为true-->
select *from user
<where>
<if test="username != null and username != ''">
 username like #{username,jdbcType=VARCHAR}
</if>
<if test="address != null and address != ''">
and address like #{address,jdbcType=VARCHAR}
</if>
</where>

</select>
<select id="findInIds" resultType="User" parameterType="ListInteger">
<include refid="defaultSql"/>
<where>
<if test="integerList != null and integerList.size() != 0">
<foreach collection="integerList" open="id in (" close=")" item="uid" separator=",">
#{uid}
</foreach>
</if>
</where>
</select>
<select id="findUsersWithAccounts" resultMap="userMap"  parameterType="int" useCache="true">
SELECT
	`user`.*,
	account.ID AS aid,
	account.UID,
	account.MONEY
FROM
	`user`
	LEFT JOIN account ON `user`.id = account.UID
	where user.id=#{uid,jdbcType=INTEGER}
</select>
<!--auto generated by MybatisCodeHelper on 2021-01-29-->
<select id="findAllByUsernameAndId" resultMap="userMap">
select <include refid="Base_Column_List"/>
from user
where username=#{username} and id=#{id}
</select>

<!--auto generated by MybatisCodeHelper on 2021-01-29-->
<update id="updateByAddressAndId">
update user
<set>
<if test="updated.id != null">
id = #{updated.id},
</if>
<if test="updated.username != null">
username = #{updated.username},
</if>
<if test="updated.address != null">
address = #{updated.address},
</if>
<if test="updated.sex != null">
sex = #{updated.sex},
</if>
<if test="updated.birthday != null">
birthday = #{updated.birthday},
</if>
</set>
where address=#{address} and id=#{id}
</update>

<select id="findAll" resultMap="userMap1">
select * from user
</select>
<!--auto generated by MybatisCodeHelper on 2021-07-05-->
<update id="updateUsernameById" >
update user
set username=#{updatedUsername}
where id=#{id}
</update>

<update id="updateUsernameById1" >
update user
set username=#{updatedUsername}
where id=#{id}
</update>


</mapper>